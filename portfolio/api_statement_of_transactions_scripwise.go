/*
 * Portfolio - API
 *
 * This is a sample server for Kotak Trade API - Portfolio
 *
 * API version: 1.1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package portfolio

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type StatementOfTransactionsScripwiseApiService service

/*
StatementOfTransactionsScripwiseApiService Get Scripwie Transaction Statement
Returns the full Transaction Statement of Client for given details
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param consumerKey Unique ID for your application
 * @param sessionToken Session ID for your application
 * @param fy Financial Year : Format - YYYY-YYYY
 * @param fromDate From Date : Format - YYYY-MM-DD
 * @param toDate To Date : Format - YYYY-MM-DD
 * @param instrumentToken unique token of instrument
 * @param optional nil or *StatementOfTransactionsScripwiseApiPortfolioTransactionsScripwiseCommodityFyFromDateToDateInstrumentTokenGetOpts - Optional Parameters:
     * @param "UserId" (optional.String) -  user Id for your application
     * @param "ClientAccount" (optional.String) -  Client account for which data requested
@return []TransactionsScripwise
*/

type StatementOfTransactionsScripwiseApiPortfolioTransactionsScripwiseCommodityFyFromDateToDateInstrumentTokenGetOpts struct {
	UserId        optional.String
	ClientAccount optional.String
}

func (a *StatementOfTransactionsScripwiseApiService) PortfolioTransactionsScripwiseCommodityFyFromDateToDateInstrumentTokenGet(ctx context.Context, consumerKey string, sessionToken string, fy string, fromDate string, toDate string, instrumentToken int32, localVarOptionals *StatementOfTransactionsScripwiseApiPortfolioTransactionsScripwiseCommodityFyFromDateToDateInstrumentTokenGetOpts) ([]TransactionsScripwise, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue []TransactionsScripwise
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/portfolio/transactions-scripwise/commodity/{fy}/{fromDate}/{toDate}/{instrumentToken}"
	localVarPath = strings.Replace(localVarPath, "{"+"fy"+"}", fmt.Sprintf("%v", fy), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"fromDate"+"}", fmt.Sprintf("%v", fromDate), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"toDate"+"}", fmt.Sprintf("%v", toDate), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"instrumentToken"+"}", fmt.Sprintf("%v", instrumentToken), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHeaderParams["consumerKey"] = parameterToString(consumerKey, "")
	localVarHeaderParams["sessionToken"] = parameterToString(sessionToken, "")
	if localVarOptionals != nil && localVarOptionals.UserId.IsSet() {
		localVarHeaderParams["userId"] = parameterToString(localVarOptionals.UserId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ClientAccount.IsSet() {
		localVarHeaderParams["clientAccount"] = parameterToString(localVarOptionals.ClientAccount.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v []TransactionsScripwise
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 403 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 429 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 502 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 503 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 504 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
StatementOfTransactionsScripwiseApiService Get Scripwie Transaction Statement
Returns the full Transaction Statement of Client for given details
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param consumerKey Unique ID for your application
 * @param sessionToken Session ID for your application
 * @param fy Financial Year : Format - YYYY-YYYY
 * @param instrumentToken unique token of instrument
 * @param optional nil or *StatementOfTransactionsScripwiseApiPortfolioTransactionsScripwiseCommodityFyInstrumentTokenGetOpts - Optional Parameters:
     * @param "UserId" (optional.String) -  user Id for your application
     * @param "ClientAccount" (optional.String) -  Client account for which data requested
@return []TransactionsScripwise
*/

type StatementOfTransactionsScripwiseApiPortfolioTransactionsScripwiseCommodityFyInstrumentTokenGetOpts struct {
	UserId        optional.String
	ClientAccount optional.String
}

func (a *StatementOfTransactionsScripwiseApiService) PortfolioTransactionsScripwiseCommodityFyInstrumentTokenGet(ctx context.Context, consumerKey string, sessionToken string, fy string, instrumentToken int32, localVarOptionals *StatementOfTransactionsScripwiseApiPortfolioTransactionsScripwiseCommodityFyInstrumentTokenGetOpts) ([]TransactionsScripwise, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue []TransactionsScripwise
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/portfolio/transactions-scripwise/commodity/{fy}/{instrumentToken}"
	localVarPath = strings.Replace(localVarPath, "{"+"fy"+"}", fmt.Sprintf("%v", fy), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"instrumentToken"+"}", fmt.Sprintf("%v", instrumentToken), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHeaderParams["consumerKey"] = parameterToString(consumerKey, "")
	localVarHeaderParams["sessionToken"] = parameterToString(sessionToken, "")
	if localVarOptionals != nil && localVarOptionals.UserId.IsSet() {
		localVarHeaderParams["userId"] = parameterToString(localVarOptionals.UserId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ClientAccount.IsSet() {
		localVarHeaderParams["clientAccount"] = parameterToString(localVarOptionals.ClientAccount.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v []TransactionsScripwise
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 403 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 429 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 502 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 503 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 504 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
StatementOfTransactionsScripwiseApiService Get Scripwie Transaction Statement
Returns the full Transaction Statement of Client for given details
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param consumerKey Unique ID for your application
 * @param sessionToken Session ID for your application
 * @param fy Financial Year : Format - YYYY-YYYY
 * @param fromDate From Date : Format - YYYY-MM-DD
 * @param toDate To Date : Format - YYYY-MM-DD
 * @param instrumentToken unique token of instrument
 * @param optional nil or *StatementOfTransactionsScripwiseApiPortfolioTransactionsScripwiseCurrencyFyFromDateToDateInstrumentTokenGetOpts - Optional Parameters:
     * @param "UserId" (optional.String) -  user Id for your application
     * @param "ClientAccount" (optional.String) -  Client account for which data requested
@return []TransactionsScripwise
*/

type StatementOfTransactionsScripwiseApiPortfolioTransactionsScripwiseCurrencyFyFromDateToDateInstrumentTokenGetOpts struct {
	UserId        optional.String
	ClientAccount optional.String
}

func (a *StatementOfTransactionsScripwiseApiService) PortfolioTransactionsScripwiseCurrencyFyFromDateToDateInstrumentTokenGet(ctx context.Context, consumerKey string, sessionToken string, fy string, fromDate string, toDate string, instrumentToken int32, localVarOptionals *StatementOfTransactionsScripwiseApiPortfolioTransactionsScripwiseCurrencyFyFromDateToDateInstrumentTokenGetOpts) ([]TransactionsScripwise, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue []TransactionsScripwise
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/portfolio/transactions-scripwise/currency/{fy}/{fromDate}/{toDate}/{instrumentToken}"
	localVarPath = strings.Replace(localVarPath, "{"+"fy"+"}", fmt.Sprintf("%v", fy), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"fromDate"+"}", fmt.Sprintf("%v", fromDate), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"toDate"+"}", fmt.Sprintf("%v", toDate), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"instrumentToken"+"}", fmt.Sprintf("%v", instrumentToken), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHeaderParams["consumerKey"] = parameterToString(consumerKey, "")
	localVarHeaderParams["sessionToken"] = parameterToString(sessionToken, "")
	if localVarOptionals != nil && localVarOptionals.UserId.IsSet() {
		localVarHeaderParams["userId"] = parameterToString(localVarOptionals.UserId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ClientAccount.IsSet() {
		localVarHeaderParams["clientAccount"] = parameterToString(localVarOptionals.ClientAccount.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v []TransactionsScripwise
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 403 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 429 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 502 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 503 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 504 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
StatementOfTransactionsScripwiseApiService Get Scripwie Transaction Statement
Returns the full Transaction Statement of Client for given details
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param consumerKey Unique ID for your application
 * @param sessionToken Session ID for your application
 * @param fy Financial Year : Format - YYYY-YYYY
 * @param instrumentToken unique token of instrument
 * @param optional nil or *StatementOfTransactionsScripwiseApiPortfolioTransactionsScripwiseCurrencyFyInstrumentTokenGetOpts - Optional Parameters:
     * @param "UserId" (optional.String) -  user Id for your application
     * @param "ClientAccount" (optional.String) -  Client account for which data requested
@return []TransactionsScripwise
*/

type StatementOfTransactionsScripwiseApiPortfolioTransactionsScripwiseCurrencyFyInstrumentTokenGetOpts struct {
	UserId        optional.String
	ClientAccount optional.String
}

func (a *StatementOfTransactionsScripwiseApiService) PortfolioTransactionsScripwiseCurrencyFyInstrumentTokenGet(ctx context.Context, consumerKey string, sessionToken string, fy string, instrumentToken int32, localVarOptionals *StatementOfTransactionsScripwiseApiPortfolioTransactionsScripwiseCurrencyFyInstrumentTokenGetOpts) ([]TransactionsScripwise, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue []TransactionsScripwise
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/portfolio/transactions-scripwise/currency/{fy}/{instrumentToken}"
	localVarPath = strings.Replace(localVarPath, "{"+"fy"+"}", fmt.Sprintf("%v", fy), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"instrumentToken"+"}", fmt.Sprintf("%v", instrumentToken), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHeaderParams["consumerKey"] = parameterToString(consumerKey, "")
	localVarHeaderParams["sessionToken"] = parameterToString(sessionToken, "")
	if localVarOptionals != nil && localVarOptionals.UserId.IsSet() {
		localVarHeaderParams["userId"] = parameterToString(localVarOptionals.UserId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ClientAccount.IsSet() {
		localVarHeaderParams["clientAccount"] = parameterToString(localVarOptionals.ClientAccount.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v []TransactionsScripwise
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 403 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 429 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 502 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 503 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 504 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
StatementOfTransactionsScripwiseApiService Get Scripwie Transaction Statement
Returns the full Transaction Statement of Client for given details
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param consumerKey Unique ID for your application
 * @param sessionToken Session ID for your application
 * @param fy Financial Year : Format - YYYY-YYYY
 * @param fromDate From Date : Format - YYYY-MM-DD
 * @param toDate To Date : Format - YYYY-MM-DD
 * @param instrumentToken unique token of instrument
 * @param optional nil or *StatementOfTransactionsScripwiseApiPortfolioTransactionsScripwiseDerivativeFyFromDateToDateInstrumentTokenGetOpts - Optional Parameters:
     * @param "UserId" (optional.String) -  user Id for your application
     * @param "ClientAccount" (optional.String) -  Client account for which data requested
@return []TransactionsScripwise
*/

type StatementOfTransactionsScripwiseApiPortfolioTransactionsScripwiseDerivativeFyFromDateToDateInstrumentTokenGetOpts struct {
	UserId        optional.String
	ClientAccount optional.String
}

func (a *StatementOfTransactionsScripwiseApiService) PortfolioTransactionsScripwiseDerivativeFyFromDateToDateInstrumentTokenGet(ctx context.Context, consumerKey string, sessionToken string, fy string, fromDate string, toDate string, instrumentToken int32, localVarOptionals *StatementOfTransactionsScripwiseApiPortfolioTransactionsScripwiseDerivativeFyFromDateToDateInstrumentTokenGetOpts) ([]TransactionsScripwise, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue []TransactionsScripwise
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/portfolio/transactions-scripwise/derivative/{fy}/{fromDate}/{toDate}/{instrumentToken}"
	localVarPath = strings.Replace(localVarPath, "{"+"fy"+"}", fmt.Sprintf("%v", fy), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"fromDate"+"}", fmt.Sprintf("%v", fromDate), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"toDate"+"}", fmt.Sprintf("%v", toDate), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"instrumentToken"+"}", fmt.Sprintf("%v", instrumentToken), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHeaderParams["consumerKey"] = parameterToString(consumerKey, "")
	localVarHeaderParams["sessionToken"] = parameterToString(sessionToken, "")
	if localVarOptionals != nil && localVarOptionals.UserId.IsSet() {
		localVarHeaderParams["userId"] = parameterToString(localVarOptionals.UserId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ClientAccount.IsSet() {
		localVarHeaderParams["clientAccount"] = parameterToString(localVarOptionals.ClientAccount.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v []TransactionsScripwise
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 403 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 429 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 502 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 503 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 504 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
StatementOfTransactionsScripwiseApiService Get Scripwie Transaction Statement
Returns the full Transaction Statement of Client for given details
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param consumerKey Unique ID for your application
 * @param sessionToken Session ID for your application
 * @param fy Financial Year : Format - YYYY-YYYY
 * @param instrumentToken unique token of instrument
 * @param optional nil or *StatementOfTransactionsScripwiseApiPortfolioTransactionsScripwiseDerivativeFyInstrumentTokenGetOpts - Optional Parameters:
     * @param "UserId" (optional.String) -  user Id for your application
     * @param "ClientAccount" (optional.String) -  Client account for which data requested
@return []TransactionsScripwise
*/

type StatementOfTransactionsScripwiseApiPortfolioTransactionsScripwiseDerivativeFyInstrumentTokenGetOpts struct {
	UserId        optional.String
	ClientAccount optional.String
}

func (a *StatementOfTransactionsScripwiseApiService) PortfolioTransactionsScripwiseDerivativeFyInstrumentTokenGet(ctx context.Context, consumerKey string, sessionToken string, fy string, instrumentToken int32, localVarOptionals *StatementOfTransactionsScripwiseApiPortfolioTransactionsScripwiseDerivativeFyInstrumentTokenGetOpts) ([]TransactionsScripwise, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue []TransactionsScripwise
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/portfolio/transactions-scripwise/derivative/{fy}/{instrumentToken}"
	localVarPath = strings.Replace(localVarPath, "{"+"fy"+"}", fmt.Sprintf("%v", fy), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"instrumentToken"+"}", fmt.Sprintf("%v", instrumentToken), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHeaderParams["consumerKey"] = parameterToString(consumerKey, "")
	localVarHeaderParams["sessionToken"] = parameterToString(sessionToken, "")
	if localVarOptionals != nil && localVarOptionals.UserId.IsSet() {
		localVarHeaderParams["userId"] = parameterToString(localVarOptionals.UserId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ClientAccount.IsSet() {
		localVarHeaderParams["clientAccount"] = parameterToString(localVarOptionals.ClientAccount.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v []TransactionsScripwise
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 403 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 429 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 502 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 503 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 504 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
StatementOfTransactionsScripwiseApiService Get Scripwie Transaction Statement
Returns the full Transaction Statement of Client for given details
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param consumerKey Unique ID for your application
 * @param sessionToken Session ID for your application
 * @param fy Financial Year : Format - YYYY-YYYY
 * @param fromDate From Date : Format - YYYY-MM-DD
 * @param toDate To Date : Format - YYYY-MM-DD
 * @param instrumentToken unique token of instrument
 * @param optional nil or *StatementOfTransactionsScripwiseApiPortfolioTransactionsScripwiseEquityFyFromDateToDateInstrumentTokenGetOpts - Optional Parameters:
     * @param "UserId" (optional.String) -  user Id for your application
     * @param "ClientAccount" (optional.String) -  Client account for which data requested
@return []TransactionsScripwise
*/

type StatementOfTransactionsScripwiseApiPortfolioTransactionsScripwiseEquityFyFromDateToDateInstrumentTokenGetOpts struct {
	UserId        optional.String
	ClientAccount optional.String
}

func (a *StatementOfTransactionsScripwiseApiService) PortfolioTransactionsScripwiseEquityFyFromDateToDateInstrumentTokenGet(ctx context.Context, consumerKey string, sessionToken string, fy string, fromDate string, toDate string, instrumentToken int32, localVarOptionals *StatementOfTransactionsScripwiseApiPortfolioTransactionsScripwiseEquityFyFromDateToDateInstrumentTokenGetOpts) ([]TransactionsScripwise, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue []TransactionsScripwise
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/portfolio/transactions-scripwise/equity/{fy}/{fromDate}/{toDate}/{instrumentToken}"
	localVarPath = strings.Replace(localVarPath, "{"+"fy"+"}", fmt.Sprintf("%v", fy), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"fromDate"+"}", fmt.Sprintf("%v", fromDate), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"toDate"+"}", fmt.Sprintf("%v", toDate), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"instrumentToken"+"}", fmt.Sprintf("%v", instrumentToken), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHeaderParams["consumerKey"] = parameterToString(consumerKey, "")
	localVarHeaderParams["sessionToken"] = parameterToString(sessionToken, "")
	if localVarOptionals != nil && localVarOptionals.UserId.IsSet() {
		localVarHeaderParams["userId"] = parameterToString(localVarOptionals.UserId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ClientAccount.IsSet() {
		localVarHeaderParams["clientAccount"] = parameterToString(localVarOptionals.ClientAccount.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v []TransactionsScripwise
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 403 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 429 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 502 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 503 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 504 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
StatementOfTransactionsScripwiseApiService Get Scripwie Transaction Statement
Returns the full Transaction Statement of Client for given details
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param consumerKey Unique ID for your application
 * @param sessionToken Session ID for your application
 * @param fy Financial Year : Format - YYYY-YYYY
 * @param instrumentToken unique token of instrument
 * @param optional nil or *StatementOfTransactionsScripwiseApiPortfolioTransactionsScripwiseEquityFyInstrumentTokenGetOpts - Optional Parameters:
     * @param "UserId" (optional.String) -  user Id for your application
     * @param "ClientAccount" (optional.String) -  Client account for which data requested
@return []TransactionsScripwise
*/

type StatementOfTransactionsScripwiseApiPortfolioTransactionsScripwiseEquityFyInstrumentTokenGetOpts struct {
	UserId        optional.String
	ClientAccount optional.String
}

func (a *StatementOfTransactionsScripwiseApiService) PortfolioTransactionsScripwiseEquityFyInstrumentTokenGet(ctx context.Context, consumerKey string, sessionToken string, fy string, instrumentToken int32, localVarOptionals *StatementOfTransactionsScripwiseApiPortfolioTransactionsScripwiseEquityFyInstrumentTokenGetOpts) ([]TransactionsScripwise, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue []TransactionsScripwise
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/portfolio/transactions-scripwise/equity/{fy}/{instrumentToken}"
	localVarPath = strings.Replace(localVarPath, "{"+"fy"+"}", fmt.Sprintf("%v", fy), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"instrumentToken"+"}", fmt.Sprintf("%v", instrumentToken), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHeaderParams["consumerKey"] = parameterToString(consumerKey, "")
	localVarHeaderParams["sessionToken"] = parameterToString(sessionToken, "")
	if localVarOptionals != nil && localVarOptionals.UserId.IsSet() {
		localVarHeaderParams["userId"] = parameterToString(localVarOptionals.UserId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ClientAccount.IsSet() {
		localVarHeaderParams["clientAccount"] = parameterToString(localVarOptionals.ClientAccount.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v []TransactionsScripwise
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 403 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 429 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 502 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 503 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 504 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
StatementOfTransactionsScripwiseApiService Get Scripwie Transaction Statement
Returns the full Transaction Statement of Client for given details
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param consumerKey Unique ID for your application
 * @param sessionToken Session ID for your application
 * @param fy Financial Year : Format - YYYY-YYYY
 * @param fromDate From Date : Format - YYYY-MM-DD
 * @param toDate To Date : Format - YYYY-MM-DD
 * @param mfcode This is commconScripCode for MF scrip in output of Holdings API
 * @param optional nil or *StatementOfTransactionsScripwiseApiPortfolioTransactionsScripwiseMutualfundFyFromDateToDateMfcodeGetOpts - Optional Parameters:
     * @param "UserId" (optional.String) -  user Id for your application
     * @param "ClientAccount" (optional.String) -  Client account for which data requested
@return []TransactionsScripwise
*/

type StatementOfTransactionsScripwiseApiPortfolioTransactionsScripwiseMutualfundFyFromDateToDateMfcodeGetOpts struct {
	UserId        optional.String
	ClientAccount optional.String
}

func (a *StatementOfTransactionsScripwiseApiService) PortfolioTransactionsScripwiseMutualfundFyFromDateToDateMfcodeGet(ctx context.Context, consumerKey string, sessionToken string, fy string, fromDate string, toDate string, mfcode int32, localVarOptionals *StatementOfTransactionsScripwiseApiPortfolioTransactionsScripwiseMutualfundFyFromDateToDateMfcodeGetOpts) ([]TransactionsScripwise, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue []TransactionsScripwise
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/portfolio/transactions-scripwise/mutualfund/{fy}/{fromDate}/{toDate}/{mfcode}"
	localVarPath = strings.Replace(localVarPath, "{"+"fy"+"}", fmt.Sprintf("%v", fy), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"fromDate"+"}", fmt.Sprintf("%v", fromDate), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"toDate"+"}", fmt.Sprintf("%v", toDate), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mfcode"+"}", fmt.Sprintf("%v", mfcode), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHeaderParams["consumerKey"] = parameterToString(consumerKey, "")
	localVarHeaderParams["sessionToken"] = parameterToString(sessionToken, "")
	if localVarOptionals != nil && localVarOptionals.UserId.IsSet() {
		localVarHeaderParams["userId"] = parameterToString(localVarOptionals.UserId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ClientAccount.IsSet() {
		localVarHeaderParams["clientAccount"] = parameterToString(localVarOptionals.ClientAccount.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v []TransactionsScripwise
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 403 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 429 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 502 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 503 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 504 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
StatementOfTransactionsScripwiseApiService Get Scripwie Transaction Statement
Returns the full Transaction Statement of Client for given details
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param consumerKey Unique ID for your application
 * @param sessionToken Session ID for your application
 * @param fy Financial Year : Format - YYYY-YYYY
 * @param mfcode This is commconScripCode for MF scrip in output of Holdings API
 * @param optional nil or *StatementOfTransactionsScripwiseApiPortfolioTransactionsScripwiseMutualfundFyMfcodeGetOpts - Optional Parameters:
     * @param "UserId" (optional.String) -  user Id for your application
     * @param "ClientAccount" (optional.String) -  Client account for which data requested
@return []TransactionsScripwise
*/

type StatementOfTransactionsScripwiseApiPortfolioTransactionsScripwiseMutualfundFyMfcodeGetOpts struct {
	UserId        optional.String
	ClientAccount optional.String
}

func (a *StatementOfTransactionsScripwiseApiService) PortfolioTransactionsScripwiseMutualfundFyMfcodeGet(ctx context.Context, consumerKey string, sessionToken string, fy string, mfcode int32, localVarOptionals *StatementOfTransactionsScripwiseApiPortfolioTransactionsScripwiseMutualfundFyMfcodeGetOpts) ([]TransactionsScripwise, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue []TransactionsScripwise
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/portfolio/transactions-scripwise/mutualfund/{fy}/{mfcode}"
	localVarPath = strings.Replace(localVarPath, "{"+"fy"+"}", fmt.Sprintf("%v", fy), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mfcode"+"}", fmt.Sprintf("%v", mfcode), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHeaderParams["consumerKey"] = parameterToString(consumerKey, "")
	localVarHeaderParams["sessionToken"] = parameterToString(sessionToken, "")
	if localVarOptionals != nil && localVarOptionals.UserId.IsSet() {
		localVarHeaderParams["userId"] = parameterToString(localVarOptionals.UserId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ClientAccount.IsSet() {
		localVarHeaderParams["clientAccount"] = parameterToString(localVarOptionals.ClientAccount.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v []TransactionsScripwise
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 403 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 429 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 502 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 503 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 504 {
			var v Fault
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
